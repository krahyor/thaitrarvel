import pytest_asyncio
from sqlmodel.ext.asyncio.session import AsyncSession
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlmodel import SQLModel
from httpx import AsyncClient
import httpx

from thaitravel.main import app
from thaitravel.models import get_session

DATABASE_URL = "sqlite+aiosqlite:///:memory:"

# ‚úÖ Engine ‡πÅ‡∏•‡∏∞ Session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
engine = create_async_engine(DATABASE_URL, echo=False)
AsyncTestingSessionLocal = sessionmaker(
    bind=engine, class_=AsyncSession, expire_on_commit=False
)


# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DB ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
@pytest_asyncio.fixture(scope="session")
async def prepare_database():
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)


# ‚úÖ Fixture session ‡∏ó‡∏µ‡πà‡∏à‡∏∞ override `get_session`
@pytest_asyncio.fixture
async def session(prepare_database):  # ‚Üê üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° fixture ‡∏ô‡∏µ‡πâ
    async with AsyncTestingSessionLocal() as session:
        yield session


# ‚úÖ Fixture client ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ session override
@pytest_asyncio.fixture
async def client(session):  # ‚Üê ‡πÉ‡∏ä‡πâ session ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    async def get_session_override():
        yield session

    app.dependency_overrides[get_session] = get_session_override

    transport = httpx.ASGITransport(app=app)
    async with AsyncClient(
        transport=transport, base_url="http://localhost:8000"
    ) as client:
        yield client

    app.dependency_overrides.clear()
